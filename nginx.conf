# ============================================================================
# NGINX CONFIGURATION - Clean Structure with Detailed Explanations Below
# ============================================================================

# MAIN CONTEXT
worker_processes auto;  # Auto-detect CPU cores

# EVENTS BLOCK
events {
    worker_connections 1024;  # Max connections per worker
    use epoll;                # Linux efficient I/O method
}

# HTTP BLOCK
http {
    # BASIC SETTINGS
    keepalive_timeout 65;           # Keep connections alive 65 seconds
    client_max_body_size 10M;       # Max upload size 10MB

    # COMPRESSION
    gzip on;                        # Enable compression
    gzip_vary on;                   # Add Vary header
    gzip_min_length 1024;           # Compress files > 1KB
    gzip_proxied any;               # Compress proxied requests
    gzip_comp_level 6;              # Compression level (1-9)
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;

    # CACHING CONFIGURATION
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=100m inactive=60m use_temp_path=off;

    # LOAD BALANCER
    upstream backend {
        server app1:8080;  # Spring Boot instance 1
        server app2:8080;  # Spring Boot instance 2
        server app3:8080;  # Spring Boot instance 3
    }

    # SERVER CONFIGURATION
    server {
        listen 80;  # Listen on HTTP port

        # STATIC FILES CACHING
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            expires 1m;                    # Browser cache 1 year
            proxy_cache my_cache;          # Nginx cache
            proxy_cache_valid 200 1d;      # Cache success for 1 day
        }

        # ALL OTHER REQUESTS
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# ============================================================================
# DETAILED EXPLANATIONS FOR EACH CONFIGURATION SECTION
# ============================================================================

# MAIN CONTEXT EXPLANATIONS:
# ---------------------------
# worker_processes auto;
# - Determines how many worker processes nginx creates
# - 'auto' = nginx detects CPU cores and creates 1 worker per core
# - More workers = better concurrent request handling
# - Alternative: Set manually like 'worker_processes 4;'
# - Best practice: Usually 1 worker per CPU core

# EVENTS BLOCK EXPLANATIONS:
# ---------------------------
# worker_connections 1024;
# - Maximum simultaneous connections each worker can handle
# - Total capacity = worker_processes × worker_connections
# - Example: 4 cores × 1024 = 4,096 total concurrent connections
# - Common values: 1024 (default), 2048, 4096 for high traffic
# - Higher values need more system resources

# use epoll;
# - Event processing method for handling I/O operations
# - 'epoll' is Linux's most efficient method for many connections
# - Alternatives: select, poll, kqueue (BSD/macOS)
# - Nginx auto-selects best method if not specified
# - epoll scales much better than older methods

# HTTP BLOCK BASIC SETTINGS EXPLANATIONS:
# ----------------------------------------
# keepalive_timeout 65;
# - How long to keep client connections open for reuse
# - Reduces overhead of constantly opening/closing connections
# - Client can send multiple requests over same connection
# - Too high = wastes memory on idle connections
# - Too low = more CPU for creating new connections
# - 65 seconds is balanced for most applications

# client_max_body_size 10M;
# - Maximum allowed size for request body (file uploads)
# - Default is only 1MB which blocks most file uploads
# - Prevents denial of service from huge upload attempts
# - Adjust based on your needs: 1M, 50M, 100M, 500M
# - Consider server disk space and memory

# COMPRESSION EXPLANATIONS:
# -------------------------
# gzip on; - Enables gzip compression for responses
# gzip_vary on; - Adds "Vary: Accept-Encoding" header for caches
# gzip_min_length 1024; - Only compress files larger than 1KB
# gzip_proxied any; - Compress responses for all proxy requests
# gzip_comp_level 6; - Compression level 1-9 (6 is balanced)
# gzip_types - File types to compress (text, CSS, JS, JSON, XML)

# CACHING EXPLANATIONS:
# ---------------------
# proxy_cache_path /var/cache/nginx - Directory to store cache files
# levels=1:2 - Creates subdirectories (e.g., /d/41/b7d9f1cde901b7dca8b6ea8250928e41)
# keys_zone=my_cache:10m - Cache zone name with 10MB memory for metadata
# max_size=100m - Maximum total disk space for cache
# inactive=60m - Remove cached items not accessed for 60 minutes
# use_temp_path=off - Write directly to cache directory (faster)

# UPSTREAM EXPLANATIONS:
# ----------------------
# upstream backend - Define group of backend servers
# server app1:8080; - Docker service names and ports
# Default algorithm: round-robin (request 1→app1, 2→app2, 3→app3, 4→app1...)
# Alternative algorithms: least_conn, ip_hash, weighted
# Health checks and failover handled automatically

# SERVER BLOCK EXPLANATIONS:
# ---------------------------
# listen 80; - Listen on standard HTTP port
# Could specify IP: listen 192.168.1.100:80;
# For HTTPS: listen 443 ssl;

# STATIC FILES LOCATION EXPLANATIONS:
# ------------------------------------
# location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$
# - Regular expression matching file extensions
# - ~* makes it case-insensitive (.CSS and .css both match)
# - $ means end of URL (prevents matching /style.css/other)
# - Handles all common static file types

# expires 1y; - Tells browsers to cache files for 1 year
# proxy_cache my_cache; - Use our defined cache zone
# proxy_cache_valid 200 1d; - Cache successful responses for 1 day
# Static files rarely change, so aggressive caching is safe

# DEFAULT LOCATION EXPLANATIONS:
# -------------------------------
# location / - Catches all URLs not matched by more specific locations
# Nginx checks most specific locations first
# This handles your main application requests

# PROXY HEADERS EXPLANATIONS:
# ----------------------------
# proxy_set_header Host $host;
# - Preserves original Host header (domain name)
# - Backend sees what domain was requested
# - Important for multi-domain applications

# proxy_set_header X-Real-IP $remote_addr;
# - Passes actual client IP to backend
# - Without this, backend only sees nginx IP
# - Needed for logging, security, geolocation

# proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# - Maintains chain of proxy IPs
# - Handles multiple proxy layers
# - Standard header for proxy chains

# proxy_set_header X-Forwarded-Proto $scheme;
# - Tells backend the original protocol (http/https)
# - Important when nginx handles SSL termination
# - Backend knows if original request was secure

# ============================================================================
# PERFORMANCE IMPACT & BENEFITS:
# ============================================================================
#
# LOAD BALANCING:
# - Distributes traffic across 3 Spring Boot instances
# - Automatic failover if one instance goes down
# - Can handle much more traffic than single instance
#
# CACHING:
# - Static files cached in browser (1 min) and nginx (1 day)
# - Dramatically reduces backend load
# - Faster page loads for users
# - Bandwidth savings from compression
#
# API CACHING:
# - Live Stock Price: Always fresh data (never cached)
# - Cached Product List: Cached for 30 seconds
#
# CONNECTION EFFICIENCY:
# - Keep-alive reduces connection overhead
# - Multiple workers handle concurrent requests
# - Efficient event processing with epoll
#
# SCALABILITY:
# - Easy to add more backend instances
# - Nginx handles thousands of concurrent connections
# - Compression reduces bandwidth usage
# ============================================================================
